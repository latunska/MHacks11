{"version":3,"sources":["thunder.svg","Ring.svg","sun.svg","rain.svg","partsun.svg","cloud.svg","snow.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleClick","console","log","states","state","validZip","$","get","zip","data","audio","document","getElementById","src","load","play","notData","symbol","notnotData","list","weather","id","parseInt","handleChange","event","newVal","target","value","length","setState","newZip","uriForAudio","bind","assertThisInitialized","react_default","a","createElement","className","onClick","logo","alt","Ring","onChange","type","placeholder","controls","loop","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.85bab0e1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/thunder.99765b31.svg\";","module.exports = __webpack_public_path__ + \"static/media/Ring.713441eb.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.2a1dddf0.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.53e6822c.svg\";","module.exports = __webpack_public_path__ + \"static/media/partsun.e9dbd62b.svg\";","module.exports = __webpack_public_path__ + \"static/media/cloud.65cb277e.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.419b9043.svg\";","import React, { Component } from 'react';\nimport $ from 'jquery';\nimport logo from './thunder.svg';\nimport sun from './sun.svg';\nimport rain from './rain.svg';\nimport partsun from './partsun.svg';\nimport cloud from './cloud.svg';\nimport snow from './snow.svg';\nimport Ring from './Ring.svg';\nimport './App.css';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.handleClick = this.handleClick.bind(this);\n    this.handleChange = this.handleChange.bind(this);\n    this.state = {newZip: false,validZip: false,uriForAudio: null,zip: null};\n  } \n  handleClick = () => {\n    console.log(\"Hello\");\n    var states = this.state;\n    if(states.validZip){\n\t$.get(\"/WeatherData?zip=\"+states.zip,function(data){\n\t var audio = document.getElementById(\"audio\");\n\t var source = document.getElementById(\"linky\");\n\t source.src = data;\n\t audio.load();\n\t audio.play();\n\t $.get(\"/WeatherJson?zip=\"+states.zip, function(notData){\n           var notnotData = notData.list[0].weather[0].id;\n\t   var symbol;\n\t   console.log(notnotData);\n\t   if(parseInt(notnotData)/100===2){\n\t\tsymbol = \"thunder\";\n\t   }if(parseInt(notnotData)/100>=3){\n\t\tsymbol = \"rain\";\n\t   }if(parseInt(notnotData)/100>=6){\n\t\tsymbol = \"snow\";\n\t   }if(parseInt(notnotData)>=800){\n\t\tsymbol = \"sunny\";\n\t   }if(parseInt(notnotData)>=802){\n\t\tsymbol = \"partsun\";\n\t   }if(parseInt(notnotData)===804){\n\t\tsymbol = \"cloud\";\n\t   }\n\t   document.getElementById(\"pic\").src = symbol+\".svg\";\t\n\t});\n});\n\n     // fetch('/WeatherData?zip='+states.zip)\n      // .then(result=> {this.setState((state) =>\n       // {return {newZip: false, validZip: true,uriForAudio: result,zip: state.zip}})}); \n    }\n  }\n  handleChange = (event) =>{\n     var newVal =event.target.value;\n     if(typeof parseInt(event.target.value) ==='number' && event.target.value.length===5){\n   this.setState((state)=> { return{newZip:true,validZip:true,uriForAudio:state.uriForAudio,zip:newVal}});\n     }else {\n       this.setState((state)=> {return {newZip:true,validZip:false,uriForAudio:state.uriForAudio,zip:state.zip}});\n     }\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n\t  <div onClick={this.handleClick} className=\"App-img\">\n            <img id=\"pic\" src={logo} className=\"App-logo\" alt=\"logo\" />\n\t    <img src={Ring} className=\"App-ring\" alt=\"ring\"/>\n          </div>\n          <p>\n            <input onChange={this.handleChange} className=\"ZipCode\" type= \"text\" placeholder=\"Enter a Zipcode\"></input>\n          </p>\n\t  <audio id=\"audio\" controls loop=\"true\">\n\t\t<source id=\"linky\" src=\"\" type=\"audio/mpeg\"/>\n\t\tGet audio you jerk\n\t  </audio>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}